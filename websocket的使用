1.前端使用js
<#--弹窗-->
<div class="modal fade" id="myModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title" id="myModalLabel">
                    提醒
                </h4>
            </div>
            <div class="modal-body">
                你有新的订单
            </div>
            <div class="modal-footer">
                <button onclick="javascript:document.getElementById('notice').pause()" type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
                <button onclick="location.reload()" type="button" class="btn btn-primary">查看新的订单</button>
            </div>
        </div>
    </div>
</div>

<#--播放音乐-->
<audio id="notice" loop="loop">
    <source src="/sell/mp3/song.mp3" type="audio/mpeg" />
</audio>

<script src="https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"></script>
<script src="https://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
<script>
    var websocket = null;
    if('WebSocket' in window) {
        websocket = new WebSocket('ws://sell.natapp4.cc/sell/webSocket');
    }else {
        alert('该浏览器不支持websocket!');
    }

    websocket.onopen = function (event) {
        console.log('建立连接');
    }

    websocket.onclose = function (event) {
        console.log('连接关闭');
    }

    websocket.onmessage = function (event) {
        console.log('收到消息:' + event.data)
        //弹窗提醒, 播放音乐
        $('#myModal').modal('show');

        document.getElementById('notice').play();
    }

    websocket.onerror = function () {
        alert('websocket通信发生错误！');
    }

    window.onbeforeunload = function () {
        websocket.close();
    }

</script>

2.pom文件引入
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        
 3.websocket配置文件
      import org.springframework.context.annotation.Bean;
      import org.springframework.stereotype.Component;
      import org.springframework.web.socket.server.standard.ServerEndpointExporter;

      /**
       * Created by 廖师兄
       * 2017-07-30 23:17
       */
      @Component
      public class WebSocketConfig {

          @Bean
          public ServerEndpointExporter serverEndpointExporter() {
              return new ServerEndpointExporter();
          }
      }
      
 4.  websocket控制类
 
      import lombok.extern.slf4j.Slf4j;
      import org.springframework.stereotype.Component;

      import javax.websocket.OnClose;
      import javax.websocket.OnMessage;
      import javax.websocket.OnOpen;
      import javax.websocket.Session;
      import javax.websocket.server.ServerEndpoint;
      import java.util.concurrent.CopyOnWriteArraySet;

      /**
       */
      @Component
      @ServerEndpoint("/webSocket")
      @Slf4j
      public class WebSocket {

          private Session session;

          private static CopyOnWriteArraySet<WebSocket> webSocketSet = new CopyOnWriteArraySet<>();

          @OnOpen
          public void onOpen(Session session) {
              this.session = session;
              webSocketSet.add(this);
              log.info("【websocket消息】有新的连接, 总数:{}", webSocketSet.size());
          }

          @OnClose
          public void onClose() {
              webSocketSet.remove(this);
              log.info("【websocket消息】连接断开, 总数:{}", webSocketSet.size());
          }

          @OnMessage
          public void onMessage(String message) {
              log.info("【websocket消息】收到客户端发来的消息:{}", message);
          }

          public void sendMessage(String message) {
              for (WebSocket webSocket: webSocketSet) {
                  log.info("【websocket消息】广播消息, message={}", message);
                  try {
                      webSocket.session.getBasicRemote().sendText(message);
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }
          }
      }
     
 5.触发点
     @Autowired
     private WebSocket webSocket;
     
     webSocket.sendMessage("hello world");
 

